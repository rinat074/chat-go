name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chatapp_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        export PATH="$PATH:$(go env GOPATH)/bin"
        protoc --version

    - name: Enable GOWORK
      run: |
        echo "GOWORK=off" >> $GITHUB_ENV

    - name: Create directory structure
      run: |
        mkdir -p bin

    - name: Install dependencies
      run: |
        cd pkg && go mod download || true
        cd ../proto/auth && go mod download || true
        cd ../chat && go mod download || true
        cd ../../services/auth-service && go mod download || true
        cd ../chat-service && go mod download || true
        cd ../gateway-service && go mod download || true
        cd ../../

    - name: Verify dependencies
      run: |
        cd pkg && go mod verify || true
        cd ../proto/auth && go mod verify || true
        cd ../chat && go mod verify || true
        cd ../../services/auth-service && go mod verify || true
        cd ../chat-service && go mod verify || true
        cd ../gateway-service && go mod verify || true
        cd ../../

    - name: Run go vet
      run: |
        # Проверяем наличие Go-файлов перед запуском go vet
        cd pkg && find . -name "*.go" | grep -q . && go vet ./... || echo "No Go files found, skipping vet"
        cd ../proto/auth && find . -name "*.go" | grep -q . && go vet ./... || echo "No Go files found, skipping vet"
        cd ../chat && find . -name "*.go" | grep -q . && go vet ./... || echo "No Go files found, skipping vet" 
        cd ../../services/auth-service && find . -name "*.go" | grep -q . && go vet ./... || echo "No Go files found, skipping vet"
        cd ../chat-service && find . -name "*.go" | grep -q . && go vet ./... || echo "No Go files found, skipping vet"
        cd ../gateway-service && find . -name "*.go" | grep -q . && go vet ./... || echo "No Go files found, skipping vet"
        cd ../../

    - name: Install golangci-lint
      run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.56.0

    - name: Run golangci-lint
      run: |
        cd pkg && find . -name "*.go" | grep -q . && golangci-lint run ./... || echo "No Go files found, skipping lint"
        cd ../proto/auth && find . -name "*.go" | grep -q . && golangci-lint run ./... || echo "No Go files found, skipping lint"
        cd ../chat && find . -name "*.go" | grep -q . && golangci-lint run ./... || echo "No Go files found, skipping lint"
        cd ../../services/auth-service && find . -name "*.go" | grep -q . && golangci-lint run ./... || echo "No Go files found, skipping lint"
        cd ../chat-service && find . -name "*.go" | grep -q . && golangci-lint run ./... || echo "No Go files found, skipping lint"
        cd ../gateway-service && find . -name "*.go" | grep -q . && golangci-lint run ./... || echo "No Go files found, skipping lint"
        cd ../../

    - name: Run tests and generate coverage
      run: |
        # Запуск тестов только для модулей, содержащих Go-файлы
        MODULES=()
        if [ -n "$(find pkg -name "*.go" 2>/dev/null)" ]; then MODULES+=("./pkg/..."); fi
        if [ -n "$(find proto/auth -name "*.go" 2>/dev/null)" ]; then MODULES+=("./proto/auth/..."); fi
        if [ -n "$(find proto/chat -name "*.go" 2>/dev/null)" ]; then MODULES+=("./proto/chat/..."); fi
        if [ -n "$(find services/auth-service -name "*.go" 2>/dev/null)" ]; then MODULES+=("./services/auth-service/..."); fi
        if [ -n "$(find services/chat-service -name "*.go" 2>/dev/null)" ]; then MODULES+=("./services/chat-service/..."); fi
        if [ -n "$(find services/gateway-service -name "*.go" 2>/dev/null)" ]; then MODULES+=("./services/gateway-service/..."); fi
        
        if [ ${#MODULES[@]} -gt 0 ]; then
          go test -race -coverprofile=coverage.out -covermode=atomic ${MODULES[@]}
        else
          echo "No Go files found for testing"
          touch coverage.out
        fi

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install Protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        export PATH="$PATH:$(go env GOPATH)/bin"

    - name: Install dependencies
      run: |
        cd pkg && go mod download || true
        cd ../proto/auth && go mod download || true
        cd ../chat && go mod download || true
        cd ../../services/auth-service && go mod download || true
        cd ../chat-service && go mod download || true
        cd ../gateway-service && go mod download || true
        cd ../../

    - name: Create directory structure
      run: |
        mkdir -p bin

    - name: Check Go files and build
      run: |
        # Проверка наличия файлов перед сборкой
        if [ -d "services/auth-service/cmd" ] && [ -n "$(find services/auth-service/cmd -name "*.go" 2>/dev/null)" ]; then
          cd services/auth-service && go build -o ../../bin/auth-service ./cmd/main.go && cd ../../
        else
          echo "No Go files found in services/auth-service/cmd"
        fi
        
        if [ -d "services/chat-service/cmd" ] && [ -n "$(find services/chat-service/cmd -name "*.go" 2>/dev/null)" ]; then
          cd services/chat-service && go build -o ../../bin/chat-service ./cmd/main.go && cd ../../
        else
          echo "No Go files found in services/chat-service/cmd"
        fi
        
        if [ -d "services/gateway-service/cmd" ] && [ -n "$(find services/gateway-service/cmd -name "*.go" 2>/dev/null)" ]; then
          cd services/gateway-service && go build -o ../../bin/gateway-service ./cmd/main.go && cd ../../
        else
          echo "No Go files found in services/gateway-service/cmd"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push auth-service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/auth-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/gochat-auth-service:latest

    - name: Build and push chat-service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/chat-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/gochat-chat-service:latest

    - name: Build and push gateway-service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./services/gateway-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/gochat-gateway-service:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /opt/gochat
          git pull
          docker-compose pull
          docker-compose up -d 